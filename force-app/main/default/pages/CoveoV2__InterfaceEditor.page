<apex:page controller="CoveoV2.EditingPageInterface" showHeader="false" showChat="false" sidebar="false" standardStylesheets="false" docType="html-5.0" extensions="CoveoV2.DynamicResourceUtils">
  <c:ConfigurationCheck needsIndex="false">
    <apex:includeScript value="{!IF(customVersionAttr != '', customVersionAttr, URLFOR(dynamicResourcePaths['searchUi'], 'js/CoveoJsSearch.js'))}"  />
    <apex:includeScript value="{!URLFOR($Resource.CoveoV2__jquery, 'jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CoveoV2__InterfaceEditor, 'js/cultures/en.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CoveoV2__assets, 'js/search.bundle.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CoveoV2__InterfaceEditor, 'js/InterfaceEditor.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CoveoV2__assets, 'js/interfaceEditor_Search.bundle.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.CoveoV2__InterfaceEditor, 'css/InterfaceEditor.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.CoveoV2__assets, 'css/interfaceEditor.style.css')}" />

    <apex:form >
      <apex:inputHidden value="{!loader.content}" id="content" />
      <apex:actionFunction name="saveSearchInterface" action="{!save}" rerender="saveCallBack" />
      <apex:actionFunction name="delApex" action="{!del}" rerender="delCallBack" />
      <apex:outputPanel id="coveoAccessTokenPanel" styleClass="coveoAccessTokenClass">
        <apex:inputHidden id="coveoAccessToken" value="{!searchToken.token}" />
      </apex:outputPanel>

      <apex:actionFunction name="coveoDoRenewAccessToken" action="{!renewSearchToken}" oncomplete="coveoDoneRenewingAccessToken()" rerender="coveoAccessToken" />
    </apex:form>

    <apex:outputPanel id="saveCallBack">
      <script>
        if (window['saveDeferred'] != null) {
          var message = '{!JSENCODE(saveError)}'
          if (message != '') {
            saveDeferred.reject(message);
          } else {
            saveDeferred.resolve();
          }
        }
      </script>
    </apex:outputPanel>

    <!-- The action function without a rerender doesn't work in the Salesforce Lightning Community Builder.
    Add this fake output panel to make it work correctly. -->
    <apex:outputPanel id="delCallBack">
    </apex:outputPanel>

    <script type="text/javascript">
      var coveoRenewAccessTokenDeferred;
      function coveoRenewAccessToken() {
        coveoDoRenewAccessToken();
        coveoRenewAccessTokenDeferred = $.Deferred();
        return coveoRenewAccessTokenDeferred;
      }
      function coveoDoneRenewingAccessToken() {
        if (coveoRenewAccessTokenDeferred) {
          coveoRenewAccessTokenDeferred.resolve(coveoGetCurrentAccessToken());
          coveoRenewAccessTokenDeferred = undefined;
        }
      }
      function coveoGetCurrentAccessToken() {
        return $("[id$='coveoAccessToken']").attr('value');
      }

      var additionalInitOptions = decodeURIComponent('{!JSENCODE(NULLVALUE($CurrentPage.parameters.additionalInitOptions, ""))}');

      var initOptionsInHeader = 'Analytics : { ' +
        'searchHub: "{!JSENCODE(searchHubAttr)}"||"{!JSENCODE(pageName)}",' +
        'endpoint: "{!JSENCODE(analyticsUri)}" ' +
        '},' +
        'SalesforceQuickview: {' +
          '"quickviewUrl": "{!JSENCODE(quickviewUrl)}"' +
        '}'

      if (additionalInitOptions) {
        initOptionsInHeader += ',' + additionalInitOptions
      }

      // Get the params of the current URL and parse them.
      function getSearchParams() {
        return window.location.search
          .substring(1)
          .split('&')
          .reduce(
            function(params, param) {
              param = param.split('=');
              var key = param[0];
              var value = param[1];
              params[key] = value;
              return params;
            },
            {}
          );
      }

      var indexType = getSearchParams()['indexTypeOverride'];
      if (!indexType) {
        indexType = "{!JSENCODE(indexType)}";
      }
      if (!indexType) {
        indexType = "";
      }
      var head = '<script src="{!URLFOR($Resource.CoveoV2__jquery, 'jquery.min.js')}"><\/script>' +
        '<script src="{!IF(customVersionAttr != '', customVersionAttr, URLFOR(dynamicResourcePaths['searchUi'], 'js/CoveoJsSearch.js'))}"><\/script>' +
          '<script src="{!URLFOR($Resource.CoveoV2__assets, 'js/search.bundle.js')}"><\/script>' +
              '<script src="{!URLFOR(dynamicResourcePaths['searchUi'], 'js/cultures/en.js')}"><\/script>' +
                '<script src="{!URLFOR($Resource.analytics, 'coveoua.js')}"><\/script>' +
                '<script src="{!URLFOR(dynamicResourcePaths['searchUi'], 'js/templates/templates.js')}"><\/script>' +
                    '<link href="{!URLFOR(dynamicResourcePaths['searchUi'], 'css/CoveoFullSearch.css')}" rel="stylesheet" />' +
                      '<link href="{!URLFOR($Resource.assets, 'css/search.style.css')}" rel="stylesheet" />' +
                        '<script>' +
                        'document.addEventListener("DOMContentLoaded", function(){' +
                        'String["locale"] = "en";' +
                        'if(Coveo && Coveo.setLanguageAfterPageLoaded) {' +
                        'Coveo.setLanguageAfterPageLoaded()' +
                        '}' +
                        'if (Coveo) {' +
                        'Coveo.Dom.useNativeJavaScriptEvents = true;' +
                        '}' +
                        'if (Coveo.SearchEndpoint.endpoints["default"] === undefined) {' +
                        'var searchEndpointConfig = {' +
                        'restUri: "{!JSENCODE(restSearchUri)}",' +
                        'accessToken: "{!JSENCODE(searchToken.token)}",' +
                        'renewAccessToken: window.parent.coveoRenewAccessToken' +
                        '};' +
                        'if("' + indexType + '") {' +
                        'searchEndpointConfig.queryStringArguments = {' +
                        'indexType:"' + indexType  + '"' +
                        '};' +
                        '}' +
                        'Coveo.SearchEndpoint.endpoints["default"] = new Coveo.SearchEndpoint(searchEndpointConfig);' +
                        '}' +
                        'Coveo.context = {!JSENCODE(searchContextJson)};' +
                        'Coveo.Analytics.options.endpoint.defaultValue = \'{!JSENCODE(analyticsUri)}\';' +
                        '_.each(document.querySelectorAll(\'.CoveoRecommendation\'), function(recommendation){' +
                        'Coveo.initRecommendation(recommendation)' +
                        '});' +
                        'Coveo.init(document.querySelector(".CoveoSearchInterface"), { ' +
                        initOptionsInHeader +
                        '});' +
                        '});' +
                        'Coveo.context = {!JSENCODE(searchContextJson)};' +
                        '<\/script>';

      var body = "{! JSENCODE(loader.content)}";
      $(function () {
        var save = function (body) {
          $('[id*=content]').val(body);
          saveSearchInterface();

          return saveDeferred =
            $.Deferred().fail(function (reason) {
              Coveo.ModalBox.open($('<p>').text(reason).get(0), {
                title: 'An error occured',
                overlayClose: true,
                buttons: Coveo.ModalBox.BUTTON.OK
              });
            });
        };

        var load = function () {
          var d = jQuery.Deferred();
          var lastModified = parseInt('{!loader.lastModified}');
          setTimeout(function () {
            d.resolve({
              root: '{!URLFOR($Resource.InterfaceEditor)}',
              body: body,
              head: head,
              lastPublished: isNaN(lastModified) ? 0 : lastModified
            });
          });
          return d;
        };

        var close = function () {
          window.location.href = '{!JSENCODE(returnUrl)}';
        };

        var repositories = JSON.parse('{! JSENCODE(repositoriesJson) }');

        Coveo.InterfaceEditor.InterfaceEditorUsage.additionalMetadata = JSON.parse('{! JSENCODE(currentUserTraitsJson) }');

        var del = function (id) {
          delApex();
        };

        // Sarissa is an object that is included by Salesforce when loading a page with IE.
        // It's not working well, and no queries made to the coveo platform works.
        // For that reason, we let the original XMLHttpRequest object that points to Sarissa and
        // that Action Function needs, but redefine Coveo's usage with the
        // original XMLHttpRequest contained in the Sarissa framework.
        var xmlHttpRequest = XMLHttpRequest;
        if (window['Sarissa'] && Sarissa.originalXMLHttpRequest) {
          xmlHttpRequest = Sarissa.originalXMLHttpRequest;

          // Temporary fix for IE11 that will allow the search-ui to always use the original XmlHttpRequest instead.
          Coveo.EndpointCaller.prototype.getXmlHttpRequest = function () { return new xmlHttpRequest(); }
        }

        var editor = new Coveo.InterfaceEditor.Editor('#editor', {
          requireConfig: {
            url: '{!URLFOR($Resource.InterfaceEditor, 'js/vs/loader.js')}',
            paths: {
              'vs': '{!URLFOR($Resource.InterfaceEditor, 'js/vs')}'
            }
          },
          basicMode: true,
          innerHTML: true,
          load: load,
          save: save,
          close: close,
          delete: del,
          iconsUrl: '{!URLFOR(dynamicResourcePaths['searchUi'], 'image/icon-list.json')}',
          namespace: "{! JSENCODE(loader.id)}",
          resultCss: '{!URLFOR(dynamicResourcePaths['searchUi'], 'css/CoveoFullSearch.css')}',
          repositories: repositories,
          environment: '{!IEditorEnv}'
        });
      });
    </script>
    <div id="editor"></div>
    <c:EasyPro />
  </c:ConfigurationCheck>
</apex:page>